import pandas as pd
import dash
from dash import dcc, html, dash_table
from dash.dependencies import Input, Output
import plotly.express as px
import re
import os

# --- 1. ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
def load_data(file_path='mytcas_scrape.xlsx'):
    if not os.path.exists(file_path):
        print(f"‚ùå Error: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå '{file_path}'. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå.")
        return pd.DataFrame(columns=['program_name', 'university', 'faculty', 'tuition_fee', 'program_type', 'tuition_fee_numeric', 'keyword'])
    
    try:
        df = pd.read_excel(file_path)
        print(f"‚úîÔ∏è ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å '{file_path}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(df)}")
        
        def parse_tuition_fee(fee_str):
            if isinstance(fee_str, str):
                numbers = re.findall(r'\d[\d,\.]*', fee_str)
                if numbers:
                    try:
                        return float(numbers[0].replace(',', ''))
                    except ValueError:
                        return None
            return None

        df['tuition_fee_numeric'] = df['tuition_fee'].apply(parse_tuition_fee)
        
        df.dropna(subset=['program_name', 'university', 'tuition_fee_numeric', 'keyword'], inplace=True)
        
        df['faculty'] = df['faculty'].fillna('‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏ì‡∏∞')
        df['program_type'] = df['program_type'].fillna('‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó')

        # *** ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà: ‡∏™‡∏£‡πâ‡∏≤‡∏á unique_id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö value ‡πÅ‡∏•‡∏∞ display_text ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label ***
        # unique_id ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
        df['unique_id'] = df['program_name'] + " - " + df['university'] + " (" + df['faculty'] + ")"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Dropdown (label)
        # ‡πÇ‡∏î‡∏¢‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢
        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        df['display_text'] = df['program_name'] + " (" + df['university'] + ")"
        
        df.sort_values(by=['program_name', 'university'], inplace=True)
        
        return df
    except Exception as e:
        print(f"‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return pd.DataFrame(columns=['program_name', 'university', 'faculty', 'tuition_fee', 'program_type', 'tuition_fee_numeric', 'keyword'])

df = load_data()

if df.empty:
    print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard ‡πÑ‡∏î‡πâ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ. ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå mytcas_scrape.xlsx ‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.")
    app = dash.Dash(__name__)
    app.layout = html.Div([
        html.H1("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ MyTCAS", style={'textAlign': 'center', 'color': '#0A1172'}),
        html.Div("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÑ‡∏î‡πâ. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå 'mytcas_scrape.xlsx' ‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 
                 style={'textAlign': 'center', 'color': 'red', 'fontSize': '18px', 'marginTop': '50px', 'padding': '20px'})
    ], style={'backgroundColor': '#F8F8F8', 'minHeight': '100vh', 'padding': '20px'})
else:
    app = dash.Dash(__name__, 
                    external_stylesheets=['https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;600&display=swap'],
                    meta_tags=[{'name': 'viewport', 'content': 'width=device-width, initial-scale=1.0'}])

    app.layout = html.Div(style={
        'fontFamily': "'Kanit', sans-serif",
        'backgroundColor': '#F0F8FF',
        'padding': '20px 40px',
        'minHeight': '100vh',
        'color': '#333333'
    }, children=[
        html.H1("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ MyTCAS üéì", style={
            'textAlign': 'center',
            'color': '#001F54',
            'marginBottom': '30px',
            'fontSize': '3em',
            'fontWeight': '600'
        }),

        html.Div([
            html.Div([
                html.H2("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", style={'color': '#034078', 'marginBottom': '15px'}),
                
                html.P("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£:", style={'color': '#555555', 'marginBottom': '5px'}),
                dcc.Dropdown(
                    id='keyword-filter-dropdown',
                    options=[
                        {'label': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'value': 'all'},
                        {'label': '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', 'value': '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏° ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå'},
                        {'label': '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå', 'value': '‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏° ‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå'}
                    ],
                    value='all',
                    clearable=False,
                    style={'backgroundColor': '#FFFFFF', 'borderColor': '#B0C4DE', 'borderRadius': '5px', 'padding': '5px', 'marginBottom': '15px'}
                ),

                html.P("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢:", style={'color': '#555555', 'marginBottom': '5px'}),
                dcc.Dropdown(
                    id='university-filter-dropdown',
                    options=[{'label': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'value': 'all'}],
                    multi=True,
                    value=['all'],
                    placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢...",
                    style={'backgroundColor': '#FFFFFF', 'borderColor': '#B0C4DE', 'borderRadius': '5px', 'padding': '5px', 'marginBottom': '15px'}
                ),

                html.P("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞:", style={'color': '#555555', 'marginBottom': '5px'}),
                dcc.Dropdown(
                    id='faculty-filter-dropdown',
                    options=[{'label': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'value': 'all'}],
                    multi=True,
                    value=['all'],
                    placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ì‡∏∞...",
                    style={'backgroundColor': '#FFFFFF', 'borderColor': '#B0C4DE', 'borderRadius': '5px', 'padding': '5px', 'marginBottom': '25px'}
                ),

                html.P("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°:", style={'color': '#555555', 'marginBottom': '15px'}),
                dcc.Dropdown(
                    id='program-dropdown',
                    options=[],
                    multi=True,
                    placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£...",
                    style={
                        'backgroundColor': '#FFFFFF', 
                        'borderColor': '#B0C4DE',
                        'borderRadius': '5px',
                        'padding': '5px'
                    },
                    clearable=True
                ),
            ], style={
                'flex': '1',
                'marginRight': '20px',
                'padding': '25px', 
                'backgroundColor': '#FFFFFF', 
                'borderRadius': '10px', 
                'boxShadow': '0 4px 12px rgba(0, 0, 0, 0.1)',
                'border': '1px solid #E0E0E0'
            }),

            html.Div([
                html.H2("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°", style={'color': '#034078', 'marginBottom': '15px'}),
                html.Div(id='summary-output', style={'padding': '10px', 'color': '#333333', 'lineHeight': '1.8'}),
            ], style={
                'flex': '1',
                'padding': '25px', 
                'backgroundColor': '#FFFFFF', 
                'borderRadius': '10px', 
                'boxShadow': '0 4px 12px rgba(0, 0, 0, 0.1)',
                'border': '1px solid #E0E0E0'
            })
        ], style={'display': 'flex', 'justifyContent': 'space-between', 'marginBottom': '40px'}),

        html.Hr(style={'borderColor': '#B0C4DE', 'borderWidth': '1px', 'borderStyle': 'solid', 'margin': '40px 0'}),

        html.H2("‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° üìà", style={
            'textAlign': 'center',
            'color': '#001F54',
            'marginBottom': '25px',
            'fontSize': '2.2em'
        }),
        html.Div([
            dcc.Graph(id='overview-tuition-chart', config={'displayModeBar': False})
        ], style={
            'padding': '25px', 
            'backgroundColor': '#FFFFFF', 
            'borderRadius': '10px', 
            'boxShadow': '0 4px 12px rgba(0, 0, 0, 0.1)',
            'border': '1px solid #E0E0E0',
            'marginBottom': '40px'
        }),

        html.Hr(style={'borderColor': '#B0C4DE', 'borderWidth': '1px', 'borderStyle': 'solid', 'margin': '40px 0'}),

        html.H2("‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏° üìä", style={
            'textAlign': 'center',
            'color': '#001F54',
            'marginBottom': '25px',
            'fontSize': '2.2em'
        }),

        html.Div([
            dcc.Graph(id='tuition-fee-comparison-chart', config={'displayModeBar': False})
        ], style={
            'padding': '25px', 
            'backgroundColor': '#FFFFFF', 
            'borderRadius': '10px', 
            'boxShadow': '0 4px 12px rgba(0, 0, 0, 0.1)',
            'border': '1px solid #E0E0E0',
            'marginBottom': '40px'
        }),

        html.Hr(style={'borderColor': '#B0C4DE', 'borderWidth': '1px', 'borderStyle': 'solid', 'margin': '40px 0'}),

        html.H2("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î üìã", style={
            'textAlign': 'center',
            'color': '#001F54',
            'marginBottom': '25px',
            'fontSize': '2.2em'
        }),

        html.Div(id='all-programs-table', style={
            'padding': '25px', 
            'backgroundColor': '#FFFFFF', 
            'borderRadius': '10px', 
            'boxShadow': '0 4px 12px rgba(0, 0, 0, 0.1)',
            'border': '1px solid #E0E0E0'
        })
    ])

    # --- 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Callbacks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö ---

    @app.callback(
        [Output('university-filter-dropdown', 'options'),
         Output('university-filter-dropdown', 'value'),
         Output('faculty-filter-dropdown', 'options'),
         Output('faculty-filter-dropdown', 'value'),
         Output('program-dropdown', 'options'),
         Output('program-dropdown', 'value')],
        [Input('keyword-filter-dropdown', 'value'),
         Input('university-filter-dropdown', 'value'),
         Input('faculty-filter-dropdown', 'value')]
    )
    def update_filter_options(selected_keyword, selected_universities_current, selected_faculties_current):
        current_filtered_df = df.copy()

        if selected_keyword and selected_keyword != 'all':
            current_filtered_df = current_filtered_df[current_filtered_df['keyword'] == selected_keyword]
        
        university_options = [{'label': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'value': 'all'}]
        university_options.extend([{'label': uni, 'value': uni} for uni in sorted(current_filtered_df['university'].unique())])

        new_uni_value = ['all']
        if selected_universities_current:
            if 'all' in selected_universities_current and len(selected_universities_current) > 1:
                new_uni_value = ['all']
            elif 'all' not in selected_universities_current:
                valid_selected_unis = [uni for uni in selected_universities_current if uni in [opt['value'] for opt in university_options]]
                if valid_selected_unis:
                    new_uni_value = valid_selected_unis
                else:
                    new_uni_value = ['all']
        
        if new_uni_value and 'all' not in new_uni_value:
             current_filtered_df = current_filtered_df[current_filtered_df['university'].isin(new_uni_value)]

        faculty_options = [{'label': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'value': 'all'}]
        faculty_options.extend([{'label': fac, 'value': fac} for fac in sorted(current_filtered_df['faculty'].unique())])
        
        new_fac_value = ['all']
        if selected_faculties_current:
            if 'all' in selected_faculties_current and len(selected_faculties_current) > 1:
                new_fac_value = ['all']
            elif 'all' not in selected_faculties_current:
                valid_selected_facs = [fac for fac in selected_faculties_current if fac in [opt['value'] for opt in faculty_options]]
                if valid_selected_facs:
                    new_fac_value = valid_selected_facs
                else:
                    new_fac_value = ['all']

        if new_fac_value and 'all' not in new_fac_value:
            current_filtered_df = current_filtered_df[current_filtered_df['faculty'].isin(new_fac_value)]

        # *** ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà: ‡πÉ‡∏ä‡πâ 'display_text' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö label ‡πÅ‡∏•‡∏∞ 'unique_id' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö value ***
        program_options = [{'label': row['display_text'], 'value': row['unique_id']} for index, row in current_filtered_df.iterrows()]
        
        return university_options, new_uni_value, faculty_options, new_fac_value, program_options, [] 

    @app.callback(
        Output('overview-tuition-chart', 'figure'),
        [Input('keyword-filter-dropdown', 'value'),
         Input('university-filter-dropdown', 'value'),
         Input('faculty-filter-dropdown', 'value')]
    )
    def update_overview_chart(selected_keyword, selected_universities, selected_faculties):
        filtered_df_for_overview = df.copy()

        if selected_keyword and selected_keyword != 'all':
            filtered_df_for_overview = filtered_df_for_overview[filtered_df_for_overview['keyword'] == selected_keyword]
        
        if selected_universities and 'all' not in selected_universities:
            filtered_df_for_overview = filtered_df_for_overview[filtered_df_for_overview['university'].isin(selected_universities)]

        if selected_faculties and 'all' not in selected_faculties:
            filtered_df_for_overview = filtered_df_for_overview[filtered_df_for_overview['faculty'].isin(selected_faculties)]
        
        if filtered_df_for_overview.empty:
            fig_overview = px.bar()
            fig_overview.update_layout(
                title='<span style="color:#001F54;"><b>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°</b></span>',
                plot_bgcolor='#F8F8F8', paper_bgcolor='#FFFFFF',
                font=dict(color='#333333', family="'Kanit', sans-serif")
            )
            return fig_overview

        avg_tuition_by_uni = filtered_df_for_overview.groupby('university')['tuition_fee_numeric'].mean().reset_index()
        avg_tuition_by_uni = avg_tuition_by_uni.sort_values(by='tuition_fee_numeric', ascending=False)

        fig_overview = px.bar(
            avg_tuition_by_uni,
            x='university',
            y='tuition_fee_numeric',
            title='<span style="color:#001F54;"><b>‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡∏≤‡∏°‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢</b></span>',
            labels={
                'university': '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢',
                'tuition_fee_numeric': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ)'
            },
            color='university',
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        fig_overview.update_layout(
            xaxis_title='‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢',
            yaxis_title='‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ)',
            plot_bgcolor='#F8F8F8',
            paper_bgcolor='#FFFFFF',
            font=dict(color='#333333', family="'Kanit', sans-serif"),
            title_font=dict(color='#001F54', size=20),
            margin=dict(l=40, r=40, t=80, b=40)
        )
        return fig_overview

    @app.callback(
        [Output('tuition-fee-comparison-chart', 'figure'),
         Output('summary-output', 'children'),
         Output('all-programs-table', 'children')],
        [Input('program-dropdown', 'value'),
         Input('keyword-filter-dropdown', 'value'),
         Input('university-filter-dropdown', 'value'),
         Input('faculty-filter-dropdown', 'value')]
    )
    def update_dashboard(selected_programs_unique_ids, selected_keyword, selected_universities, selected_faculties):
        display_df = df.copy()

        if selected_keyword and selected_keyword != 'all':
            display_df = display_df[display_df['keyword'] == selected_keyword]
        
        if selected_universities and 'all' not in selected_universities:
            display_df = display_df[display_df['university'].isin(selected_universities)]

        if selected_faculties and 'all' not in selected_faculties:
            display_df = display_df[display_df['faculty'].isin(selected_faculties)]

        comparison_df = pd.DataFrame()
        summary_text = html.P("‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å Dropdown ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°")
        
        if selected_programs_unique_ids:
            comparison_df = df[df['unique_id'].isin(selected_programs_unique_ids)].copy() 
            
            if not comparison_df.empty:
                fig = px.bar(
                    comparison_df,
                    x='program_name',
                    y='tuition_fee_numeric',
                    color='university',
                    barmode='group',
                    title='<span style="color:#001F54;"><b>‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</b></span>',
                    labels={
                        'program_name': '‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£',
                        'tuition_fee_numeric': '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏° (‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ)',
                        'university': '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢'
                    },
                    hover_data={
                        'tuition_fee': True, 
                        'program_type': True, 
                        'faculty': True,
                        'tuition_fee_numeric': ':.2f'
                    },
                    color_discrete_sequence=px.colors.sequential.Blues_r
                )
                fig.update_layout(
                    xaxis={'categoryorder':'total ascending'},
                    yaxis_title='‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏° (‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ)',
                    xaxis_title='‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£',
                    plot_bgcolor='#F8F8F8',
                    paper_bgcolor='#FFFFFF',
                    font=dict(color='#333333', family="'Kanit', sans-serif"),
                    title_font=dict(color='#001F54', size=20),
                    margin=dict(l=40, r=40, t=80, b=40)
                )
                
                min_fee_program = comparison_df.loc[comparison_df['tuition_fee_numeric'].idxmin()]
                max_fee_program = comparison_df.loc[comparison_df['tuition_fee_numeric'].idxmax()]
                avg_fee = comparison_df['tuition_fee_numeric'].mean()

                summary_text = html.Div([
                    html.P(f"‚ú® ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {len(comparison_df)} ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£"),
                    html.P(f"üí∞ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_fee:,.2f} ‡∏ö‡∏≤‡∏ó/‡∏õ‡∏µ"),
                    html.P([
                        html.Span("‚¨áÔ∏è ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: "),
                        html.B(f"{min_fee_program['program_name']} ({min_fee_program['university']})"),
                        f" - {min_fee_program['tuition_fee']}"
                    ]),
                    html.P([
                        html.Span("‚¨ÜÔ∏è ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: "),
                        html.B(f"{max_fee_program['program_name']} ({max_fee_program['university']})"),
                        f" - {max_fee_program['tuition_fee']}"
                    ]),
                ])
            else:
                fig = px.bar()
                fig.update_layout(
                    title='<span style="color:#001F54;"><b>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</b></span>',
                    plot_bgcolor='#F8F8F8', paper_bgcolor='#FFFFFF'
                )
                summary_text = html.P("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å. ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á.")
        else:
            fig = px.bar()
            fig.update_layout(
                title='<span style="color:#001F54;"><b>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡∏≠‡∏°</b></span>',
                plot_bgcolor='#F8F8F8', paper_bgcolor='#FFFFFF'
            )

        all_programs_table = dash_table.DataTable(
            id='table-container',
            columns=[
                {"name": "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", "id": "program_name", "type": "text"},
                {"name": "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢", "id": "university", "type": "text"},
                {"name": "‡∏Ñ‡∏ì‡∏∞", "id": "faculty", "type": "text"},
                {"name": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£", "id": "program_type", "type": "text"},
                {"name": "‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", "id": "tuition_fee", "type": "text"},
                {"name": "‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏Å", "id": "keyword", "type": "text"}
            ],
            data=display_df.to_dict('records'),
            filter_action="native",
            sort_action="native",
            page_size=10,
            style_header={
                'backgroundColor': '#034078',
                'color': 'white',
                'fontWeight': 'bold',
                'textAlign': 'left',
                'fontFamily': "'Kanit', sans-serif"
            },
            style_data={
                'backgroundColor': 'white',
                'color': '#333333',
                'fontFamily': "'Kanit', sans-serif"
            },
            style_cell={
                'padding': '10px',
                'border': '1px solid #E0E0E0',
                'whiteSpace': 'normal',
                'height': 'auto',
                'minWidth': '100px', 'width': '150px', 'maxWidth': '300px',
                'textAlign': 'left'
            },
            style_data_conditional=[
                {
                    'if': {'row_index': 'odd'},
                    'backgroundColor': '#F8F8F8'
                }
            ],
            export_format="xlsx",
            export_headers="display"
        )

        return fig, summary_text, all_programs_table

if __name__ == '__main__':
    try:
        app.run(debug=True, port=8050)
    except NameError:
        print("Dash App ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå 'mytcas_scrape.xlsx' ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.")